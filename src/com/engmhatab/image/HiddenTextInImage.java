package com.engmhatab.image;

import java.awt.Desktop;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * FunctionEnDec.java
 *
 * Created on 03 , 2007, 02:09 ã
 */
/**
 *
 * @author ADMIN
 */
public class HiddenTextInImage extends javax.swing.JFrame {

    //Create a file chooser
    final JFileChooser fc = new JFileChooser();

//In response to a button click:
    /**
     * Creates new form FunctionEnDec
     */
    public HiddenTextInImage() {
        initComponents(); 
        
        //sets the text and language of all the components in JFileChooser
        UIManager.put("FileChooser.openDialogTitleText", "فتح");
        UIManager.put("FileChooser.lookInLabelText", "LookIn");
        UIManager.put("FileChooser.openButtonText", "فتح");
        UIManager.put("FileChooser.cancelButtonText", "إلغاء الامر");
        UIManager.put("FileChooser.fileNameLabelText", "اسم الملف");
        UIManager.put("FileChooser.filesOfTypeLabelText", "نوع الملف");
        UIManager.put("FileChooser.openButtonToolTipText", "فتح الملف المحدد");
        UIManager.put("FileChooser.cancelButtonToolTipText","إلغاء الامر");
        UIManager.put("FileChooser.fileNameHeaderText","اسم الملف");
        UIManager.put("FileChooser.upFolderToolTipText", "لاعلى");
        UIManager.put("FileChooser.homeFolderToolTipText","سطح المكتب");
        UIManager.put("FileChooser.newFolderToolTipText","انشاء مجلد جديد");
        UIManager.put("FileChooser.listViewButtonToolTipText","قائمة");
        UIManager.put("FileChooser.newFolderButtonText","انشاء مجلد جديد");
        UIManager.put("FileChooser.renameFileButtonText", "اعادة تسمية الملف");
        UIManager.put("FileChooser.deleteFileButtonText", "حذف الملف");
        UIManager.put("FileChooser.filterLabelText", "نوع الملف");
        UIManager.put("FileChooser.detailsViewButtonToolTipText", "التفاصيل");
        UIManager.put("FileChooser.fileSizeHeaderText","الحجم");
        UIManager.put("FileChooser.fileDateHeaderText", "تاريخ التعديل");
        SwingUtilities.updateComponentTreeUI(fc);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBtnEncode = new javax.swing.JButton();
        jBtnDecode = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextOut = new javax.swing.JTextArea();
        jLabOutImageSource = new javax.swing.JLabel();
        jTImgSource = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("www.engmhatab.com");
        getContentPane().setLayout(null);

        jBtnEncode.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jBtnEncode.setText("حفظ النص داخل صورة");
        jBtnEncode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEncodeActionPerformed(evt);
            }
        });
        getContentPane().add(jBtnEncode);
        jBtnEncode.setBounds(370, 470, 280, 40);

        jBtnDecode.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jBtnDecode.setText("استخراج النص من الصورة");
        jBtnDecode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDecodeActionPerformed(evt);
            }
        });
        getContentPane().add(jBtnDecode);
        jBtnDecode.setBounds(20, 470, 300, 40);

        TextOut.setColumns(20);
        TextOut.setLineWrap(true);
        TextOut.setRows(5);
        TextOut.setWrapStyleWord(true);
        jScrollPane1.setViewportView(TextOut);

        jScrollPane2.setViewportView(jScrollPane1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(20, 10, 640, 400);

        jLabOutImageSource.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabOutImageSource.setForeground(new java.awt.Color(0, 51, 153));
        jLabOutImageSource.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabOutImageSource.setText("الحالة");
        getContentPane().add(jLabOutImageSource);
        jLabOutImageSource.setBounds(20, 410, 630, 30);

        jTImgSource.setEditable(false);
        jTImgSource.setBackground(new java.awt.Color(255, 255, 255));
        jTImgSource.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(jTImgSource);
        jTImgSource.setBounds(20, 440, 630, 30);

        setSize(new java.awt.Dimension(690, 555));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnDecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDecodeActionPerformed
        fc.setCurrentDirectory(new File("Output Image\\."));
 
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION  ) {
            File file = fc.getSelectedFile();
            jLabOutImageSource.setText("مسار الصور المراد قراءة الرسالة منها: "  );
             jTImgSource.setText(file.getAbsolutePath());
            byte[] read = Decode(file.getPath()); // this is need
            if (read != null) {
                String max = null;
                try {
                    max = new String(read, "UTF8");
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(HiddenTextInImage.class.getName()).log(Level.SEVERE, null, ex);
                }
                TextOut.setText(max);
            }
            //This is where a real application would open the file.
            // System.out.println("Opening: " + file.getName() + ".");
        } else {
            // System.out.println("Open command cancelled by user.");
        }


    }//GEN-LAST:event_jBtnDecodeActionPerformed

    private void jBtnEncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEncodeActionPerformed
        String Max = this.TextOut.getText().trim();
        byte[] data;
        try {
            data = Max.getBytes("UTF8");
            String outImage = Encode(data); // This is need

            if (outImage != null) {
                System.out.println("outImage : " + outImage);
                Desktop.getDesktop().open(new File("Output Image\\."));
                jLabOutImageSource.setText("مسار الصورة التي تم حفظ نص الرسالة فيها : " );
                jTImgSource.setText(new File(outImage).getAbsolutePath());
            } else { 
                jLabOutImageSource.setText("حجم الصورة صغير، يرجى اختيار حجم اكبر");
                jTImgSource.setText("");
            }

            //System.out.println("outImage : "+outImage);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(HiddenTextInImage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HiddenTextInImage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jBtnEncodeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HiddenTextInImage().setVisible(true);
            }
        });
    }

    private String Encode(byte[] data) {
        // Encode  2 2 1 1 2 for each byte
        String SelectImage = "";
        String OutImageName = "OutImage";
        int DLength = data.length;

        File tree = new File("Pictures");
        tree.mkdir();
        File f1 = new File("Pictures\\Big");
        f1.mkdir();
        File f2 = new File("Pictures\\Mid");
        f2.mkdir();
        File f3 = new File("Pictures\\Small");
        f3.mkdir();

        if (DLength < 100000) {
            SelectImage += "Pictures\\Small\\Pic";
        } else if (DLength < 471855) {
            SelectImage += "Pictures\\Mid\\Pic";
        } else if (DLength < 850287) {
            SelectImage += "Pictures\\Big\\Pic";
        } else {
            JOptionPane.showMessageDialog(null,
                    "النص المدخل أكبر من حجم الصور المتاحة !", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        int RandomImage = (int) (Math.random() * 5);
        SelectImage += "" + RandomImage + ".jpg";

        /** * ******** foe select image  
        
        FileFilter imageFilter = new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes());
        fc.setCurrentDirectory(new File("Output Image\\."));
        fc.setFileFilter(imageFilter);
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            jLabOutImageSource.setText("Input Image Source : " + file.getPath());
            SelectImage = file.getPath();
            OutImageName = file.getName();
            // System.out.println("Opening: " + file.getName() + ".");
        } else {
            // System.out.println("Open command cancelled by user.");
        }
        */
        //---------------------- Step 2 --------------------------------//
        BufferedImage image_orig = null;

        File ImageFile = new File(SelectImage);
        if (!ImageFile.exists()) {
            return null;
        }
        try {
            image_orig = ImageIO.read(ImageFile);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    "Image could not be read!", "Error", JOptionPane.ERROR_MESSAGE);
             return null;
        }
        //-------------------------Step 3 --------------------------------//
        BufferedImage image = new BufferedImage(image_orig.getWidth(), image_orig.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
        Graphics2D graphics = image.createGraphics();
        graphics.drawRenderedImage(image_orig, null);
        graphics.dispose();
        //------------------------- Image Form byte ---------------------------------//
        WritableRaster raster = image.getRaster();
        DataBufferByte buffer = (DataBufferByte) raster.getDataBuffer();
        byte img[] = buffer.getData();
        //----------------------- Byte Size Form byte---------------------------------//

        byte byte3 = (byte) ((DLength & 0xFF000000) >>> 24); //0
        byte byte2 = (byte) ((DLength & 0x00FF0000) >>> 16); //0
        byte byte1 = (byte) ((DLength & 0x0000FF00) >>> 8); //0
        byte byte0 = (byte) ((DLength & 0x000000FF));

        byte len[] = new byte[]{byte3, byte2, byte1, byte0};
        //--------------------- Encode_Byte(img,len,0) ----------------------------//
        int offset = img.length - 20;/*0;*/
        //check that the data + offset will fit in the image

        if (len.length + offset > img.length) {
            JOptionPane.showMessageDialog(null,
                    "حجم الصورة صغير جدا", "Error", JOptionPane.ERROR_MESSAGE);
             return null;
        }
        // System.out.println("addition :"+(len.length*5)+" : image:"+img.length);
        //loop through each addition byte
        for (int i = 0; i < len.length; ++i) {
            //loop through the 8 bits of each byte
            int add = len[i];

            int b1 = ((add & 0xC0) >>> 6);
            img[offset] = (byte) ((img[offset] & 0xFC) | b1);
            offset++;

            b1 = ((add & 0x30) >>> 4);
            img[offset] = (byte) ((img[offset] & 0xFC) | b1);
            offset++;

            b1 = (add >>> 3) & 1;
            img[offset] = (byte) ((img[offset] & 0xFE) | b1);
            offset++;

            b1 = (add >>> 2) & 1;
            img[offset] = (byte) ((img[offset] & 0xFE) | b1);
            offset++;

            b1 = (add & 0x03);
            img[offset] = (byte) ((img[offset] & 0xFC) | b1);
            offset++;
        }
        //--------------------- Encode_Byte(img,Data,32) ----------------------------//
        offset = 0;/*32;*/
        //check that the data + offset will fit in the image
        /*if (DLength + offset > img.length - 20 ) {
            JOptionPane.showMessageDialog(null,
                    "File not long enough!", "Error", JOptionPane.ERROR_MESSAGE);
        }*/
        if ((DLength * 5) > img.length - 20/* img.length*/) {
            JOptionPane.showMessageDialog(null,
                    "حجم الصورة صغير جدا", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        //System.out.println("addition :"+(DLength*5)+" : image:"+img.length);
        //loop through each addition byte
        for (int i = 0; i < DLength; ++i) {
            //loop through the 8 bits of each byte
            int add = data[i];

            int b1 = ((add & 0xC0) >>> 6);
            img[offset] = (byte) ((img[offset] & 0xFC) | b1);
            offset++;

            b1 = ((add & 0x30) >>> 4);
            img[offset] = (byte) ((img[offset] & 0xFC) | b1);
            offset++;

            b1 = (add >>> 3) & 1;
            img[offset] = (byte) ((img[offset] & 0xFE) | b1);
            offset++;

            b1 = (add >>> 2) & 1;
            img[offset] = (byte) ((img[offset] & 0xFE) | b1);
            offset++;

            b1 = (add & 0x03);
            img[offset] = (byte) ((img[offset] & 0xFC) | b1);
            offset++;
        }
        //--------------------- Save Image ----------------------------------//
        File f4 = new File("Output Image");
        f4.mkdir();
        //----------------
        // get all file in the postion
        File n = new File("Output Image\\.");
        // list all file name or dir
        String a[] = n.list();
        int count = 0;
        for (int i = 0; i < a.length; i++) {
            // type of file will read and do something on it
            // search if file type there found
            if (a[i].startsWith(OutImageName)) {
                String is = a[i];
                String id = is.substring(OutImageName.length(), is.indexOf("."));
                if (!id.equalsIgnoreCase("")) {
                    int temper = Integer.parseInt(id);
                    if (temper >= count) {
                        count = temper + 1;
                    }
                }
            }
        }
        //-----------------
        String ext = "png";
        File file = new File("Output Image\\" + OutImageName + "" + count + ".png");
        try {
            file.delete(); //delete resources used by the File
            ImageIO.write(image, ext, file);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "File could not be saved!", "Error", JOptionPane.ERROR_MESSAGE);
             return null;
        }

        return "Output Image\\" + OutImageName + "" + count + ".png";
    }

    private byte[] Decode(String PathFile) {
        // Decode  2 2 1 1 2 for each byte
        String SelectImage = PathFile;
        File f4 = new File("Output Image");
        f4.mkdir();
        //---------------------- Step 2 --------------------------------//
        BufferedImage image_modify = null;

        File ImageFile = new File(SelectImage);
        if (!ImageFile.exists()) {
            return null;
        }
        try {
            image_modify = ImageIO.read(ImageFile);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    "Image could not be read!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        //-------------------------Step 3 --------------------------------//
        BufferedImage image = new BufferedImage(image_modify.getWidth(), image_modify.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
        Graphics2D graphics = image.createGraphics();
        graphics.drawRenderedImage(image_modify, null);
        graphics.dispose();
        //------------------------- Image Form byte ---------------------------------//
        WritableRaster raster = image.getRaster();
        DataBufferByte buffer = (DataBufferByte) raster.getDataBuffer();
        byte img[] = buffer.getData();
        //--------------------------- decode image -----------------------------------//
        int length = 0;
        int offset = 0;
        /*32;*/
        int temp = 0;
        int offsetLength = img.length - 20;

        //loop through 20 bytes of data to determine text length
        for (int k = 0; k < 4; ++k) //i=24 will also work, as only the 4th byte contains real data
        {
            int i = k * 5;
            length = (length << 2) | (img[offsetLength + i] & 3);
            i++;
            length = (length << 2) | (img[offsetLength + i] & 3);
            i++;
            length = (length << 1) | (img[offsetLength + i] & 1);
            i++;
            length = (length << 1) | (img[offsetLength + i] & 1);
            i++;
            length = (length << 2) | (img[offsetLength + i] & 3);
        }
        byte[] result = new byte[length];

        //loop through each byte of text
        for (int b = 0; b < result.length; ++b) //i=24 will also work, as only the 4th byte contains real data
        {
            int i = b * 5;
            result[b] = (byte) ((result[b] << 2) | (img[offset + i] & 3));
            i++;
            result[b] = (byte) ((result[b] << 2) | (img[offset + i] & 3));
            i++;
            result[b] = (byte) ((result[b] << 1) | (img[offset + i] & 1));
            i++;
            result[b] = (byte) ((result[b] << 1) | (img[offset + i] & 1));
            i++;
            result[b] = (byte) ((result[b] << 2) | (img[offset + i] & 3));
        }

        return result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JTextArea TextOut;
    private javax.swing.JButton jBtnDecode;
    private javax.swing.JButton jBtnEncode;
    private javax.swing.JLabel jLabOutImageSource;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTImgSource;
    // End of variables declaration//GEN-END:variables

}
